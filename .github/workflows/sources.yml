name: Generate sources (flattened xray + cidr)

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: sources-builder
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GOFLAGS: -buildvcs=false
  DEBIAN_FRONTEND: noninteractive

  # Секции-ядро для geosite (из community/data) — можно править тут
  SECTIONS_IN: |
    private
    category-ru
    reddit
    spotify
    youtube
    discord
    telegram

  # Конфиг для извлечения RU/PRIVATE из upstream geoip.dat
  CONFIG_GET: |
    {
      "input": [
        {
          "type": "v2rayGeoIPDat",
          "action": "add",
          "args": {
            "uri": "https://raw.githubusercontent.com/Loyalsoldier/geoip/refs/heads/release/geoip.dat",
            "wantedList": ["ru", "private"]
          }
        }
      ],
      "output": [
        {
          "type": "text",
          "action": "output",
          "args": {
            "outputDir": "./extracted",
            "outputExtension": ".txt",
            "wantedList": ["ru", "private"]
          }
        }
      ]
    }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch sources (create if missing)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/sources >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/sources:refs/remotes/origin/sources
            git switch -c sources --track origin/sources || git switch sources
            git pull --ff-only || true
          else
            git switch -c sources
            git -c user.email="${COMMIT_USER_EMAIL}" -c user.name="${COMMIT_USER_NAME}" commit --allow-empty -m init
            git push -u origin HEAD:sources
          fi

      - name: Prepare helpers
        run: |
          set -Eeuo pipefail
          mkdir -p .ci community _inputs geosite geoip
          git fetch --no-tags --depth=1 origin main
          git show origin/main:.ci/optimize.py > .ci/optimize.py
          cat > .ci/helpers.sh <<'SH'
          set -Eeuo pipefail
          OPT_PY="${GITHUB_WORKSPACE}/.ci/optimize.py"
          dom_xray_preserve()             { python3 "$OPT_PY" domains "$1" "$2" --input-type xray  --target preserve --view xray; }
          dom_from_clean_to_xray_suffix() { python3 "$OPT_PY" domains "$1" "$2" --input-type clean --target suffix   --view xray; }
          dom_from_clean_to_xray_exact()  { python3 "$OPT_PY" domains "$1" "$2" --input-type clean --target exact    --view xray; }
          ip_opt()                        { python3 "$OPT_PY" ips "$1" "$2"; }
          get() { curl -fsSL --compressed --connect-timeout 10 --max-time 120 "$1" -o "$2"; }
          SH

      - name: Checkout v2fly/domain-list-community (data only)
        uses: actions/checkout@v5
        with:
          repository: v2fly/domain-list-community
          path: community
          fetch-depth: 1
          sparse-checkout: |
            data
          sparse-checkout-cone-mode: true
          filter: blob:none

      - name: Build geosite/category-nongov-ru (category-ru minus include: category-gov-ru)
        run: |
          set -Eeuo pipefail
          src="community/data/category-ru"
          if [[ -f "$src" ]]; then
            sed -E 's/\r$//' "$src" | grep -vE '^[[:space:]]*include:[[:space:]]*category-gov-ru([[:space:]]|$|#|@)' \
              > community/data/.tmp-category-nongov-ru
            python3 .ci/optimize.py domains community/data/.tmp-category-nongov-ru geosite/category-nongov-ru.list \
              --input-type xray --target preserve --view xray
            rm -f community/data/.tmp-category-nongov-ru
          fi

      - name: Resolve sections and flatten → geosite/*.list
        run: |
          set -Eeuo pipefail
          source .ci/helpers.sh
          DATA_DIR="community/data"
          declare -A keep processed
          while IFS= read -r line; do
            line="${line//$'\r'/}"; line="${line%%#*}"; f="$(echo "$line" | xargs)"
            [[ -n "$f" ]] && keep["$f"]=1
          done <<< "${SECTIONS_IN}"
          for seed in category-ru category-gov-ru private; do keep["$seed"]=1; done
          changed=1
          while [[ $changed -eq 1 ]]; do
            changed=0
            for file in "${!keep[@]}"; do
              [[ -n "${processed[$file]:-}" ]] && continue
              processed["$file"]=1
              p="$DATA_DIR/$file"; [[ -f "$p" ]] || continue
              while IFS= read -r inc; do
                inc="${inc#include:}"; inc="${inc%%#*}"; inc="$(echo "$inc" | xargs)"
                [[ -n "$inc" && -z "${keep[$inc]:-}" ]] && { keep["$inc"]=1; changed=1; }
              done < <(grep -E '^include:' "$p" || true)
            done
          done
          for rel in "${!keep[@]}"; do
            src="$DATA_DIR/$rel"; [[ -f "$src" ]] || continue
            out="geosite/${rel}.list"; mkdir -p "$(dirname "$out")"
            dom_xray_preserve "$src" "$out"
          done

      - name: Download external DOMAIN sources
        run: |
          set -Eeuo pipefail
          source .ci/helpers.sh
          urls=(
            "https://raw.githubusercontent.com/1andrevich/Re-filter-lists/main/community.lst _inputs/refilter-community-domains.src"
            "https://community.antifilter.download/list/domains.lst _inputs/antifilter-community-domains.src"
            "https://raw.githubusercontent.com/1andrevich/Re-filter-lists/main/domains_all.lst _inputs/refilter-domains.src"
            "https://raw.githubusercontent.com/itdoginfo/allow-domains/main/Russia/inside-raw.lst _inputs/russia-inside.src"
            "https://raw.githubusercontent.com/itdoginfo/allow-domains/main/Russia/outside-raw.lst _inputs/russia-outside.src"
            "https://raw.githubusercontent.com/itdoginfo/allow-domains/main/Services/google_ai.lst _inputs/google-ai.src"
            "https://raw.githubusercontent.com/sakib-m/Pi-hole-Torrent-Blocklist/main/all-torrent-trackers.txt _inputs/torrent-trackers.src"
            "https://raw.githubusercontent.com/sakib-m/Pi-hole-Torrent-Blocklist/refs/heads/main/custom-tracker.txt _inputs/torrent-trackers-custom.src"
          )
          pids=(); MAXJ=6
          for pair in "${urls[@]}"; do read -r u o <<<"$pair"; get "$u" "$o" & pids+=($!); (( ${#pids[@]} >= MAXJ )) && { wait "${pids[0]}"; pids=("${pids[@]:1}"); }; done
          for pid in "${pids[@]}"; do wait "$pid"; done

      - name: Normalize external DOMAIN → geosite/*.list
        run: |
          set -Eeuo pipefail
          source .ci/helpers.sh
          dom_from_clean_to_xray_suffix _inputs/refilter-community-domains.src geosite/refilter-community-domains.list
          dom_from_clean_to_xray_suffix _inputs/antifilter-community-domains.src geosite/antifilter-community-domains.list
          dom_from_clean_to_xray_suffix _inputs/refilter-domains.src            geosite/refilter-domains.list
          dom_from_clean_to_xray_suffix _inputs/russia-inside.src               geosite/russia-inside.list
          dom_from_clean_to_xray_suffix _inputs/russia-outside.src              geosite/russia-outside.list
          dom_from_clean_to_xray_suffix _inputs/google-ai.src                   geosite/google-ai.list
          dom_from_clean_to_xray_exact  _inputs/torrent-trackers.src            geosite/torrent-trackers.list
          dom_from_clean_to_xray_exact  _inputs/torrent-trackers-custom.src     geosite/torrent-trackers-custom.list

      - name: Build derived geosite/category-ban-ru.list
        run: |
          set -Eeuo pipefail
          t='\.(ru|su|yandex|psk|xn--80adxhks|xn--80asehdb|xn--80aswg|xn--c1avg|xn--d1acj3b|xn--p1acf|xn--p1ai)$'
          tmp="$(mktemp)"
          for f in geosite/refilter-domains.list geosite/youtube.list geosite/discord.list \
                   geosite/antifilter-community-domains.list geosite/russia-inside.list geosite/google-ai.list \
                   geosite/refilter-community-domains.list; do
            [[ -f "$f" ]] && cat "$f"
          done | sed -E '/^(full:|keyword:|regexp:)/d; s/^domain://' | grep -E "$t" | sort -u > "$tmp"
          { printf '%s\n' jut.su habr.com 4pda.to; cat "$tmp"; } | sort -u > geosite/category-ban-ru.list
          rm -f "$tmp"

      - name: Setup Go (for geoip tool)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Extract RU/PRIVATE from upstream geoip.dat → geoip/*.list
        run: |
          set -Eeuo pipefail
          printf '%s\n' "$CONFIG_GET" > config_get.json
          git clone --depth=1 https://github.com/Loyalsoldier/geoip geoip-src
          (cd geoip-src && go build ./)
          ./geoip-src/geoip convert -c ./config_get.json
          python3 .ci/optimize.py ips extracted/ru.txt      geoip/ru.list
          python3 .ci/optimize.py ips extracted/private.txt geoip/private.list
          rm -rf extracted geoip-src config_get.json

      - name: Download external IP sources
        run: |
          set -Eeuo pipefail
          source .ci/helpers.sh
          urls=(
            "https://raw.githubusercontent.com/GhostRooter0953/discord-voice-ips/master/voice_domains/discord-voice-ip-list _inputs/discord-voice-ips.src"
            "https://core.telegram.org/resources/cidr.txt _inputs/telegram-ips.src"
            "https://www.cloudflare.com/ips-v4 _inputs/cloudflare4.src"
            "https://www.cloudflare.com/ips-v6 _inputs/cloudflare6.src"
            "https://raw.githubusercontent.com/1andrevich/Re-filter-lists/main/ipsum.lst _inputs/refilter-ips.src"
            "https://raw.githubusercontent.com/1andrevich/Re-filter-lists/main/community_ips.lst _inputs/refilter-community-ips.src"
          )
          pids=(); MAXJ=6
          for pair in "${urls[@]}"; do read -r u o <<<"$pair"; get "$u" "$o" & pids+=($!); (( ${#pids[@]} >= MAXJ )) && { wait "${pids[0]}"; pids=("${pids[@]:1}"); }; done
          for pid in "${pids[@]}"; do wait "$pid"; done
          { cat _inputs/cloudflare4.src; echo; cat _inputs/cloudflare6.src; } > _inputs/cloudflare-all.src

      - name: Normalize IP → geoip/*.list
        run: |
          set -Eeuo pipefail
          source .ci/helpers.sh
          ip_opt _inputs/discord-voice-ips.src      geoip/discord-voice-ips.list
          ip_opt _inputs/telegram-ips.src           geoip/telegram.list
          ip_opt _inputs/cloudflare4.src            geoip/cloudflare-ipv4.list
          ip_opt _inputs/cloudflare6.src            geoip/cloudflare-ipv6.list
          ip_opt _inputs/cloudflare-all.src         geoip/cloudflare-all.list
          ip_opt _inputs/refilter-ips.src           geoip/refilter-ips.list
          ip_opt _inputs/refilter-community-ips.src geoip/refilter-community-ips.list

      - name: Build derived geoip/category-ban-ru.list (RU ∩ refilter)
        run: |
          set -Eeuo pipefail
          python3 - <<'PY'
          import os, ipaddress
          def read_nets(p):
              if not os.path.exists(p): return []
              out=[]
              with open(p,'r',encoding='utf-8',errors='ignore') as f:
                  for t in f:
                      t=t.strip()
                      if not t or t.startswith('#'): continue
                      try: out.append(ipaddress.ip_network(t,strict=False))
                      except: pass
              return out
          def collapse(nets):
              from ipaddress import collapse_addresses
              v4=[n for n in nets if n.version==4]; v6=[n for n in nets if n.version==6]
              from itertools import chain
              return list(collapse_addresses(v4))+list(collapse_addresses(v6))
          def intersect(A,B):
              A=collapse(A); B=collapse(B)
              i=j=0; out=[]
              from ipaddress import summarize_address_range, ip_address
              while i<len(A) and j<len(B):
                  a=A[i]; b=B[j]
                  if int(a.broadcast_address)<int(b.network_address): i+=1; continue
                  if int(b.broadcast_address)<int(a.network_address): j+=1; continue
                  lo=max(int(a.network_address), int(b.network_address))
                  hi=min(int(a.broadcast_address), int(b.broadcast_address))
                  out.extend(summarize_address_range(ip_address(lo), ip_address(hi)))
                  if int(a.broadcast_address)<int(b.broadcast_address): i+=1
                  else: j+=1
              return collapse(out)
          ru  = read_nets("geoip/ru.list")
          rf  = read_nets("geoip/refilter-ips.list") + read_nets("geoip/refilter-community-ips.list")
          out = intersect(ru, rf)
          with open("geoip/category-ban-ru.list","w",encoding="utf-8") as f:
              for n in sorted(out,key=lambda n:(n.version,n.prefixlen,int(n.network_address))):
                  f.write(f"{n.network_address}/{n.prefixlen}\n")
          PY

      - name: Commit geosite/ and geoip/
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git ls-files -z | xargs -0 -r git rm -f --cached
          git add -f geosite geoip
          git diff --staged --quiet || { git commit -m "Update sources $(date -u +'%Y-%m-%dT%H:%M:%SZ')"; git push || true; }
