name: Generate xray (geosite + geoip) from sources

on:
  schedule:
    - cron: "10 0 * * *"
  workflow_dispatch:

concurrency:
  group: xray-from-sources
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GOFLAGS: -buildvcs=false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch xray-rulesets (create if missing)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/xray-rulesets >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/xray-rulesets:refs/remotes/origin/xray-rulesets
            git switch -c xray-rulesets --track origin/xray-rulesets || git switch xray-rulesets
            git pull --ff-only
          else
            git switch -c xray-rulesets
            git -c user.email="${{ env.COMMIT_USER_EMAIL }}" -c user.name="${{ env.COMMIT_USER_NAME }}" commit --allow-empty -m "Initialize xray-rulesets"
            git push -u origin HEAD:xray-rulesets
          fi

      - name: Prepare helpers and files from main
        run: |
          set -Eeuo pipefail
          mkdir -p .ci community/data geoip
          git fetch --no-tags --depth=1 origin main
          git show origin/main:.ci/optimize.py > .ci/optimize.py
          git show origin/main:sections_out > sections_out || true
          git show origin/main:config.json > config.json || true
          cat > .ci/helpers.sh <<'SH'
          set -Eeuo pipefail
          OPT_PY="${GITHUB_WORKSPACE}/.ci/optimize.py"
          dom_xray_preserve() { python3 "$OPT_PY" domains "$1" "$2" --input-type xray --target preserve --view xray; }
          SH

      - name: Pull sources/{geosite,geoip} from sources branch
        run: |
          set -Eeuo pipefail
          git fetch --no-tags --depth=1 origin sources
          # geosite → community/data
          rm -rf community/data && mkdir -p community/data
          while IFS= read -r p; do
            rel="${p#sources/geosite/}"
            mkdir -p "community/data/$(dirname "$rel")"
            git show "origin/sources:$p" > "community/data/$rel"
          done < <(git ls-tree -r --name-only origin/sources:sources/geosite)
          # geoip → ./geoip
          rm -rf geoip && mkdir -p geoip
          while IFS= read -r p; do
            rel="${p#sources/geoip/}"
            mkdir -p "geoip/$(dirname "$rel")"
            git show "origin/sources:$p" > "geoip/$rel"
          done < <(git ls-tree -r --name-only origin/sources:sources/geoip)

      - name: Filter community/data by sections_out
        if: success()
        run: |
          set -Eeuo pipefail
          if [[ -f sections_out ]]; then
            declare -A keep
            while IFS= read -r line; do
              line="${line%%#*}"
              f="$(echo "$line" | xargs)"
              [[ -n "$f" ]] && keep["$f"]=1
            done < sections_out
            find community/data -type f -print0 | while IFS= read -r -d '' path; do
              rel="${path#community/data/}"
              [[ -n "${keep[$rel]:-}" ]] || rm -f "$path"
            done
          fi

      - name: Normalize community/data (xray preserve)
        run: |
          set -Eeuo pipefail
          source .ci/helpers.sh
          find community/data -maxdepth 10 -type f -print0 | while IFS= read -r -d '' f; do
            tmp="$(mktemp --suffix=.list)"
            dom_xray_preserve "$f" "$tmp"
            mv "$tmp" "$f"
          done

      - name: Checkout Loyalsoldier/domain-list-custom (builder only)
        uses: actions/checkout@v5
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom
          fetch-depth: 1
          filter: blob:none

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum
          cache: true

      - name: Build geosite.dat from community/data
        run: |
          set -Eeuo pipefail
          rm -f geosite.dat
          pushd custom >/dev/null
          go run ./ -outputpath=.. -exportlists= -datapath=../community/data -togfwlist=category-ru
          popd >/dev/null

      - name: Build geoip.dat from geoip/ via Loyalsoldier/geoip
        run: |
          set -Eeuo pipefail
          rm -f geoip.dat
          git clone --depth=1 https://github.com/Loyalsoldier/geoip geoip-src
          pushd geoip-src >/dev/null
          go build ./
          popd >/dev/null
          if [[ -s config.json ]]; then
            ./geoip-src/geoip convert -c ./config.json
            test -f output/geoip.dat && mv output/geoip.dat ./geoip.dat
          else:
            echo "config.json missing; skipping geoip.dat build" >&2
          fi
          rm -rf output geoip-src

      - name: Stamp date
        run: echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"

      - name: Commit artifacts (geosite.dat, geoip.dat, flat geosite/)
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git add -A community/data geosite.dat geoip.dat
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Update xray rulesets ${DATE}"
          git push || true
