name: Generate xray (geosite + geoip) from sources

on:
  schedule:
    - cron: "10 0 * * *"
  workflow_dispatch:

concurrency:
  group: xray-from-sources
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GOFLAGS: -buildvcs=false
  DEBIAN_FRONTEND: noninteractive
  GEOSITE_INCLUDE: |
    private
    category-ru
    reddit
    spotify
    youtube
    discord
    telegram
    refilter
    refilter-community
    category-ban-ru
    category-nongov-ru
    torrent-trackers
    torrent-trackers-custom
    antifilter-community
    google-ai
    russia-outside
    category-gov-ru
    russia-inside
  GEOIP_INCLUDE: |
    ru
    private
    category-ban-ru
    cloudflare
    cloudflare4
    cloudflare6
    discord-voice
    telegram
    refilter
    refilter-community

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch xray-rulesets (create if missing)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/xray-rulesets >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/xray-rulesets:refs/remotes/origin/xray-rulesets
            git switch -c xray-rulesets --track origin/xray-rulesets || git switch xray-rulesets
          else
            git switch -c xray-rulesets
            git -c user.email="${COMMIT_USER_EMAIL}" -c user.name="${COMMIT_USER_NAME}" commit --allow-empty -m "Initialize xray-rulesets"
            git push -u origin HEAD:xray-rulesets
          fi

      - name: Prepare work dirs
        run: |
          set -Eeuo pipefail
          rm -rf /tmp/community/data /tmp/geoip /tmp/out
          mkdir -p /tmp/community/data /tmp/geoip /tmp/out
          git fetch --no-tags --depth=1 origin sources main

      - name: Pull geosite & geoip from sources (filtered by env; content unchanged)
        run: |
          set -Eeuo pipefail

          declare -A keep_site=() keep_ip=()

          if [[ -n "${GEOSITE_INCLUDE:-}" ]]; then
            while IFS= read -r raw; do
              raw="${raw//$'\r'/}"; raw="${raw%%#*}"
              item="$(echo "$raw" | xargs)"; [[ -z "$item" ]] && continue
              keep_site["$item"]=1
              [[ "$item" == *.list ]] || keep_site["$item.list"]=1
              bn="${item##*/}"; keep_site["$bn"]=1; [[ "$bn" == *.list ]] || keep_site["$bn.list"]=1
              [[ "$bn" == *.list ]] && keep_site["${bn%.list}"]=1 || true
            done <<< "${GEOSITE_INCLUDE}"
          fi

          if [[ -n "${GEOIP_INCLUDE:-}" ]]; then
            while IFS= read -r raw; do
              raw="${raw//$'\r'/}"; raw="${raw%%#*}"
              item="$(echo "$raw" | xargs)"; [[ -z "$item" ]] && continue
              keep_ip["$item"]=1
              [[ "$item" == *.list ]] || keep_ip["$item.list"]=1
              bn="${item##*/}"; keep_ip["$bn"]=1; [[ "$bn" == *.list ]] || keep_ip["$bn.list"]=1
              [[ "$bn" == *.list ]] && keep_ip["${bn%.list}"]=1 || true
            done <<< "${GEOIP_INCLUDE}"
          fi

          while IFS= read -r rel; do
            bn="${rel##*/}"; base="${bn%.list}"
            if (( ${#keep_site[@]} > 0 )); then
              [[ -n "${keep_site[$rel]:-}${keep_site[$bn]:-}${keep_site[$base]:-}${keep_site[$base.list]:-}" ]] || continue
            fi
            mkdir -p "/tmp/community/data/$(dirname "$rel")"
            git show "origin/sources:geosite/$rel" > "/tmp/community/data/$rel"
          done < <(git ls-tree -r --name-only origin/sources:geosite || true)

          while IFS= read -r rel; do
            bn="${rel##*/}"; base="${bn%.list}"
            if (( ${#keep_ip[@]} > 0 )); then
              [[ -n "${keep_ip[$rel]:-}${keep_ip[$bn]:-}${keep_ip[$base]:-}${keep_ip[$base.list]:-}" ]] || continue
            fi
            mkdir -p "/tmp/geoip/$(dirname "$rel")"
            git show "origin/sources:geoip/$rel" > "/tmp/geoip/$rel"
          done < <(git ls-tree -r --name-only origin/sources:geoip || true)

      - name: Make v2fly-style filenames for geosite (drop only .list; content unchanged)
        run: |
          set -Eeuo pipefail
          find /tmp/community/data -type f -name '*.list' -print0 | while IFS= read -r -d '' f; do
            dir="$(dirname "$f")"; base="$(basename "$f" .list)"
            mv -f "$f" "$dir/$base"
          done

      - name: Checkout Loyalsoldier/domain-list-custom (builder)
        uses: actions/checkout@v5
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom
          fetch-depth: 1
          filter: blob:none

      - name: Decide whether to rebuild geosite.dat
        id: decide
        run: |
          set -Eeuo pipefail
          GS_HASH="$(git ls-tree -r origin/sources:geosite 2>/dev/null | sha256sum | awk '{print $1}')"
          BUILDER_HASH="$(git -C custom rev-parse HEAD)"
          WF_HASH="$(git show origin/main:.github/workflows/xray.yml | sha256sum | awk '{print $1}')"
          COMBINED="$(printf '%s\n%s\n%s\n' "$GS_HASH" "$BUILDER_HASH" "$WF_HASH" | sha256sum | awk '{print $1}')"
          echo "GEOSITE_BUILD_HASH=$COMBINED" >> "$GITHUB_ENV"
          OLD="$(cat geosite.hash 2>/dev/null || true)"
          if [[ "$OLD" == "$COMBINED" ]]; then
            echo "SKIP_GEOSITE=1" >> "$GITHUB_ENV"
          else
            echo "SKIP_GEOSITE=0" >> "$GITHUB_ENV"
          fi

      - name: Setup Go (for geosite build)
        if: env.SKIP_GEOSITE != '1'
        uses: actions/setup-go@v5
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum
          cache: true

      - name: Build geosite.dat (from original lists)
        if: env.SKIP_GEOSITE != '1'
        run: |
          set -Eeuo pipefail
          pushd custom >/dev/null
          go run ./ -outputpath=/tmp/out -exportlists= -datapath=/tmp/community/data -togfwlist=category-ru
          popd >/dev/null

      - name: Build geoip.dat
        run: |
          set -Eeuo pipefail
          rm -rf /tmp/geoip-src
          git clone --depth=1 https://github.com/Loyalsoldier/geoip /tmp/geoip-src
          pushd /tmp/geoip-src >/dev/null
          go build ./
          popd >/dev/null

          python3 - <<'PY'
          import os, json
          inc = os.environ.get("GEOIP_INCLUDE","")
          wanted = []
          for line in inc.splitlines():
            t = line.split('#',1)[0].strip()
            if not t: continue
            base = os.path.basename(t)
            if base.endswith(".list"): base = base[:-5]
            wanted.append(base)
          inputs = []
          for name in wanted:
            p_noext = f"/tmp/geoip/{name}"
            p_list  = p_noext + ".list"
            if   os.path.isfile(p_list):  inputs.append({"type":"text","action":"add","args":{"name":name,"uri":p_list}})
            elif os.path.isfile(p_noext): inputs.append({"type":"text","action":"add","args":{"name":name,"uri":p_noext}})
          if not inputs:
            raise SystemExit(0)
          cfg = {
            "input": inputs,
            "output": [{
              "type": "v2rayGeoIPDat",
              "action": "output",
              "args": {"outputDir": "/tmp/out", "outputName": "geoip.dat"}
            }]
          }
          os.makedirs("/tmp/out", exist_ok=True)
          with open("/tmp/config.json","w",encoding="utf-8") as f:
            json.dump(cfg, f, ensure_ascii=False)
          PY

          if [[ -s /tmp/config.json ]]; then
            /tmp/geoip-src/geoip convert -c /tmp/config.json
          fi

      - name: Publish artifacts (conditional geosite)
        run: |
          set -Eeuo pipefail
          # publish geosite.dat and its hash only when rebuilt
          if [[ "${SKIP_GEOSITE:-0}" != "1" && -s /tmp/out/geosite.dat ]]; then
            mv /tmp/out/geosite.dat ./geosite.dat
            printf '%s\n' "${GEOSITE_BUILD_HASH:-}" > ./geosite.hash
          fi
          # publish geoip.dat if built
          [[ -s /tmp/out/geoip.dat ]] && mv /tmp/out/geoip.dat ./geoip.dat

      - name: Commit only changed files
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git add geosite.dat geosite.hash geoip.dat 2>/dev/null || true
          git diff --staged --quiet && exit 0
          git commit -m "Update xray geofiles $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push || true
