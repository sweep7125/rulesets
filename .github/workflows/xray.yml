name: Generate xray (geosite + geoip) from sources

on:
  schedule:
    - cron: "10 0 * * *"
  workflow_dispatch:

concurrency:
  group: xray-from-sources
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GOFLAGS: -buildvcs=false
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch xray-rulesets (create if missing)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/xray-rulesets >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/xray-rulesets:refs/remotes/origin/xray-rulesets
            git switch -c xray-rulesets --track origin/xray-rulesets || git switch xray-rulesets
            git pull --ff-only || true
          else
            git switch -c xray-rulesets
            git -c user.email="${{ env.COMMIT_USER_EMAIL }}" -c user.name="${{ env.COMMIT_USER_NAME }}" \
              commit --allow-empty -m "Initialize xray-rulesets"
            git push -u origin HEAD:xray-rulesets
          fi

      - name: Prepare helpers and files from main (use /tmp)
        run: |
          set -Eeuo pipefail
          mkdir -p /tmp/community/data /tmp/geoip /tmp/out
          git fetch --no-tags --depth=1 origin main
          git show origin/main:.ci/optimize.py > /tmp/optimize.py
          git show origin/main:sections_out > /tmp/sections_out || true
          git show origin/main:config.json   > /tmp/config.json   || true
          cat > /tmp/helpers.sh <<'SH'
          set -Eeuo pipefail
          OPT_PY="/tmp/optimize.py"
          dom_xray_preserve() { python3 "$OPT_PY" domains "$1" "$2" --input-type xray --target preserve --view xray; }
          SH
          chmod +x /tmp/optimize.py

      - name: Pull geosite & geoip from sources (with sections_out filter, variant A)
        run: |
          set -Eeuo pipefail
          git fetch --no-tags --depth=1 origin sources
      
          # geosite → community/data
          rm -rf community/data && mkdir -p community/data
          while IFS= read -r p; do
            # p приходит относительно дерева geosite/, например: "reddit.list" или "dir/name.list"
            rel="$p"
            mkdir -p "community/data/$(dirname "$rel")"
            git show "origin/sources:geosite/$p" > "community/data/$rel"
          done < <(git ls-tree -r --name-only origin/sources:geosite || true)
      
          # Применяем sections_out только к geosite (учитываем имена с/без .list)
          if [[ -s sections_out ]]; then
            declare -A keep
            while IFS= read -r line; do
              line="${line//$'\r'/}"          # CRLF → LF
              line="${line%%#*}"              # убрать комментарий после #
              name="$(echo "$line" | xargs)"  # trim
              [[ -z "$name" ]] && continue
              keep["$name"]=1
              keep["$name.list"]=1
            done < sections_out
      
            find community/data -type f -print0 | while IFS= read -r -d '' path; do
              rel="${path#community/data/}"
              base="$(basename "$rel")"
              [[ -n "${keep[$base]:-}" ]] || rm -f "$path"
            done
          fi
      
          # geoip → geoip (без фильтрации sections_out)
          rm -rf geoip && mkdir -p geoip
          while IFS= read -r p; do
            rel="$p"  # относительный к дереву geoip/
            mkdir -p "geoip/$(dirname "$rel")"
            git show "origin/sources:geoip/$p" > "geoip/$rel"
          done < <(git ls-tree -r --name-only origin/sources:geoip || true)


      - name: Normalize /tmp/community/data (xray preserve; idempotent)
        run: |
          set -Eeuo pipefail
          source /tmp/helpers.sh
          find /tmp/community/data -type f -print0 | while IFS= read -r -d '' f; do
            tmp="$(mktemp --suffix=.list)"
            dom_xray_preserve "$f" "$tmp"
            mv "$tmp" "$f"
          done

      - name: Checkout Loyalsoldier/domain-list-custom (builder only)
        uses: actions/checkout@v5
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom
          fetch-depth: 1
          filter: blob:none

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum
          cache: true

      - name: Build geosite.dat (output to /tmp/out)
        run: |
          set -Eeuo pipefail
          pushd custom >/dev/null
          # exportlists выключен, берём нормализованные источники из /tmp/community/data
          go run ./ -outputpath=/tmp/out -exportlists= -datapath=/tmp/community/data -togfwlist=category-ru
          popd >/dev/null
          test -s /tmp/out/geosite.dat || { echo "geosite.dat not generated" >&2; exit 1; }

      - name: Build geoip.dat from /tmp/geoip via Loyalsoldier/geoip (output to /tmp/out)
        run: |
          set -Eeuo pipefail
          rm -rf /tmp/geoip-src
          git clone --depth=1 https://github.com/Loyalsoldier/geoip /tmp/geoip-src
          pushd /tmp/geoip-src >/dev/null
          go build ./
          popd >/dev/null
          if [[ -s /tmp/config.json ]]; then
            pushd /tmp/geoip-src >/dev/null
            ./geoip convert -c /tmp/config.json
            popd >/dev/null
            if [[ -f /tmp/geoip-src/output/geoip.dat ]]; then
              mv /tmp/geoip-src/output/geoip.dat /tmp/out/geoip.dat
            else
              echo "WARN: geoip.dat not generated"
            fi
          else
            echo "config.json missing; skipping geoip.dat build" >&2
          fi

      - name: Publish ONLY *.dat to repo root
        run: |
          set -Eeuo pipefail
          # должны быть сгенерированы хотя бы один .dat
          if [[ ! -s /tmp/out/geosite.dat && ! -s /tmp/out/geoip.dat ]]; then
            echo "No .dat files built — aborting publish" >&2
            exit 1
          fi
          # подчистим корень ветки: оставим только .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          # перенесём .dat в корень
          [[ -s /tmp/out/geosite.dat ]] && mv /tmp/out/geosite.dat ./geosite.dat
          [[ -s /tmp/out/geoip.dat   ]] && mv /tmp/out/geoip.dat   ./geoip.dat
          ls -l *.dat || true

      - name: Commit only geosite.dat and geoip.dat
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          git commit -m "Update xray geofiles ${DATE}"
          git push || true
