name: Generate mihomo rulesets from sources

on:
  schedule:
    - cron: "5 0 * * *"
  workflow_dispatch:

concurrency:
  group: mihomo-from-sources
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch mihomo-rulesets (create if missing, keep only *.mrs)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/mihomo-rulesets >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/mihomo-rulesets:refs/remotes/origin/mihomo-rulesets
            git switch -c mihomo-rulesets --track origin/mihomo-rulesets || git switch mihomo-rulesets
            git pull --ff-only || true
          else
            git switch -c mihomo-rulesets
            find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
            git -c user.email="${COMMIT_USER_EMAIL}" -c user.name="${COMMIT_USER_NAME}" commit --allow-empty -m init
            git push -u origin HEAD:mihomo-rulesets
          fi

      - name: Prepare helpers
        run: |
          set -Eeuo pipefail
          git fetch --no-tags --depth=1 origin main
          git show origin/main:.ci/optimize.py > /tmp/optimize.py
          cat > /tmp/helpers.sh <<'SH'
          set -Eeuo pipefail
          OPT_PY="/tmp/optimize.py"
          dom_xray_to_mihomo() { python3 "$OPT_PY" domains "$1" "$2" --input-type xray --target to-mihomo --view mihomo; }
          SH

      - name: Fetch sources lists
        run: |
          set -Eeuo pipefail
          git fetch --no-tags --depth=1 origin sources

      - name: Install Mihomo (download latest archive)
        run: |
          set -Eeuo pipefail
          resp=$(curl -fsSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/MetaCubeX/mihomo/releases/latest")
          url=$(jq -r '.assets[] | select(.name | test("^mihomo-linux-amd64.*\\.(zip|tar\\.gz)$")) | .browser_download_url' <<<"$resp" | head -n1)
          mkdir -p /tmp/mihomo
          case "$url" in
            *.zip)
              curl -fsSL "$url" -o /tmp/mihomo/mihomo.zip
              unzip -q /tmp/mihomo/mihomo.zip -d /tmp/mihomo
              ;;
            *.tar.gz)
              curl -fsSL "$url" -o /tmp/mihomo/mihomo.tgz
              tar -xzf /tmp/mihomo/mihomo.tgz -C /tmp/mihomo
              ;;
          esac
          chmod +x /tmp/mihomo/mihomo*/* 2>/dev/null || true
          chmod +x /tmp/mihomo/mihomo 2>/dev/null || true
          echo "/tmp/mihomo/mihomo" > /tmp/MH_BIN
          if [[ ! -x /tmp/mihomo/mihomo ]]; then
            MH=$(find /tmp/mihomo -type f -name mihomo -perm -111 | head -n1); ln -sf "$MH" /tmp/mihomo/mihomo
          fi

      - name: Build *.mrs (to repo root)
        run: |
          set -Eeuo pipefail
          source /tmp/helpers.sh
          MH=/tmp/mihomo/mihomo
          mkdir -p /tmp/work
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +

          # GEOSITE -> DOMAIN rules
          while IFS= read -r f; do
            [[ "$f" == *.list ]] || continue
            mkdir -p "/tmp/work/$(dirname "$f")"
            git show "origin/sources:geosite/$f" > "/tmp/work/${f}.xray"
            dom_xray_to_mihomo "/tmp/work/${f}.xray" "/tmp/work/${f}.mihomo.list"
            bn="$(basename "$f" .list)"
            "$MH" convert-ruleset domain text "/tmp/work/${f}.mihomo.list" "./geosite-${bn}.mrs"
          done < <(git ls-tree -r --name-only origin/sources:geosite || true)

          # GEOIP -> IPCIDR rules
          while IFS= read -r f; do
            [[ "$f" == *.list ]] || continue
            mkdir -p "/tmp/work/$(dirname "$f")"
            git show "origin/sources:geoip/$f" > "/tmp/work/${f}"
            bn="$(basename "$f" .list)"
            "$MH" convert-ruleset ipcidr text "/tmp/work/${f}" "./geoip-${bn}.mrs"
          done < <(git ls-tree -r --name-only origin/sources:geoip || true)

      - name: Commit *.mrs only
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git add -A
          git diff --staged --quiet || { git commit -m "Update Mihomo rules $(date -u +'%Y-%m-%dT%H:%M:%SZ')"; git push || true; }
