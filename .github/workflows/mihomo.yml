name: Generate mihomo rulesets from sources

on:
  schedule:
    - cron: "5 0 * * *"
  workflow_dispatch:

concurrency:
  group: mihomo-from-sources
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch mihomo-rulesets (create if missing, keep only *.mrs)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/mihomo-rulesets >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/mihomo-rulesets:refs/remotes/origin/mihomo-rulesets
            git switch -c mihomo-rulesets --track origin/mihomo-rulesets || git switch mihomo-rulesets
            git pull --ff-only || true
          else
            git switch -c mihomo-rulesets
            # пустая ветка (без CI)
            find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
            git -c user.email="${COMMIT_USER_EMAIL}" -c user.name="${COMMIT_USER_NAME}" \
              commit --allow-empty -m "Initialize empty rules branch"
            git push -u origin HEAD:mihomo-rulesets
          fi

      - name: Prepare helpers (use /tmp, keep repo clean)
        run: |
          set -Eeuo pipefail
          git fetch --no-tags --depth=1 origin main
          git show origin/main:.ci/optimize.py > /tmp/optimize.py
          chmod +x /tmp/optimize.py
          cat > /tmp/helpers.sh <<'SH'
          set -Eeuo pipefail
          OPT_PY="/tmp/optimize.py"
          # Требуется поддержка --target to-mihomo в optimize.py
          dom_xray_to_mihomo() { python3 "$OPT_PY" domains "$1" "$2" --input-type xray --target to-mihomo --view mihomo; }
          SH

      - name: Resolve latest Mihomo release
        id: resolve
        run: |
          set -Eeuo pipefail
          resp=$(curl -fsSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/MetaCubeX/mihomo/releases/latest")
          tag=$(jq -r '.tag_name' <<<"$resp")
          url=$(jq -r '.assets[] | select(.name | test("^mihomo-linux-amd64.*\\.deb$")) | .browser_download_url' <<<"$resp" | head -n1)
          echo "MIHOMO_TAG=$tag" >> "$GITHUB_ENV"
          echo "MIHOMO_DEB_URL=$url" >> "$GITHUB_ENV"

      - name: Install Mihomo
        run: |
          set -Eeuo pipefail
          if [[ -z "${MIHOMO_DEB_URL:-}" || "${MIHOMO_DEB_URL}" == "null" ]]; then
            resp=$(curl -fsSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/MetaCubeX/mihomo/releases/tags/${MIHOMO_TAG}")
            MIHOMO_DEB_URL=$(jq -r '.assets[] | select(.name | test("^mihomo-linux-amd64.*\\.deb$")) | .browser_download_url' <<<"$resp" | head -n1)
          fi
          curl -fsSL -H "Authorization: token ${GITHUB_TOKEN}" -o /tmp/mihomo.deb "$MIHOMO_DEB_URL"
          sudo apt-get update
          sudo apt-get install -y --fix-missing /tmp/mihomo.deb
          rm -f /tmp/mihomo.deb

      - name: Read file list from sources branch
        id: srcfiles
        run: |
          set -Eeuo pipefail
          git fetch --no-tags --depth=1 origin sources
          GEOSITE=$(git ls-tree -r --name-only origin/sources:geosite | tr '\n' ' ')
          GEOIP=$(git ls-tree -r --name-only origin/sources:geoip   | tr '\n' ' ')
          echo "GEOSITE=$GEOSITE" >> "$GITHUB_OUTPUT"
          echo "GEOIP=$GEOIP"     >> "$GITHUB_OUTPUT"

      - name: Build *.mrs to repository root (only .mrs artifacts)
        run: |
          set -Eeuo pipefail
          source /tmp/helpers.sh
          mkdir -p /tmp/work

          # подчистим корень ветки: оставим только .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +

          # GEOSITE -> Mihomo DOMAIN rules (.mrs) в КОРЕНЬ
          for f in ${{ steps.srcfiles.outputs.GEOSITE }}; do
            mkdir -p "/tmp/work/$(dirname "$f")"
            git show "origin/sources:geosite/$f" > "/tmp/work/${f}.xray"
            dom_xray_to_mihomo "/tmp/work/${f}.xray" "/tmp/work/${f}.mihomo.list"
            base="${f%.list}"
            mihomo convert-ruleset domain text "/tmp/work/${f}.mihomo.list" "./geosite-${base}.mrs"
          done

          # GEOIP -> Mihomo IPCIDR rules (.mrs) в КОРЕНЬ (опционально)
          for f in ${{ steps.srcfiles.outputs.GEOIP }}; do
            mkdir -p "/tmp/work/$(dirname "$f")"
            git show "origin/sources:geoip/$f" > "/tmp/work/${f}"
            base="${f%.list}"
            mihomo convert-ruleset ipcidr text "/tmp/work/${f}" "./geoip-${base}.mrs"
          done

          # страховка: удалить всё, что не *.mrs
          find . -mindepth 1 -maxdepth 1 -type d ! -name '.git' -exec rm -rf {} +
          find . -mindepth 1 -maxdepth 1 -type f ! -name '*.mrs' -delete

      - name: Commit *.mrs only
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          git commit -m "Update Mihomo rules ${DATE}"
          git push || true
