name: Generate mihomo rulesets from sources

on:
  schedule:
    - cron: "5 0 * * *"
  workflow_dispatch:

concurrency:
  group: mihomo-from-sources
  cancel-in-progress: true

permissions:
  contents: write

env:
  COMMIT_USER_NAME: ${{ github.actor }}
  COMMIT_USER_EMAIL: ${{ github.actor }}@users.noreply.github.com
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Switch to branch mihomo-rulesets (create if missing, keep only *.mrs)
        run: |
          set -Eeuo pipefail
          if git ls-remote --exit-code --heads origin refs/heads/mihomo-rulesets >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin refs/heads/mihomo-rulesets:refs/remotes/origin/mihomo-rulesets
            git switch -c mihomo-rulesets --track origin/mihomo-rulesets || git switch mihomo-rulesets
            git pull --ff-only || true
          else
            git switch -c mihomo-rulesets
            find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
            git -c user.email="${COMMIT_USER_EMAIL}" -c user.name="${COMMIT_USER_NAME}" commit --allow-empty -m "Initialize empty rules branch"
            git push -u origin HEAD:mihomo-rulesets
          fi

      - name: Install Mihomo (latest .deb)
        run: |
          set -Eeuo pipefail
          url=$(
            curl -fsSL -H "Authorization: bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/MetaCubeX/mihomo/releases/latest \
            | jq -r '.assets[] | select(.name | test("^mihomo-linux-amd64.*\\.deb$")) | .browser_download_url' \
            | head -n1
          )
          curl -fsSL -H "Authorization: bearer ${GITHUB_TOKEN}" -o /tmp/mihomo.deb "$url"
          sudo apt-get update
          sudo apt-get install -y /tmp/mihomo.deb
          rm -f /tmp/mihomo.deb

      - name: Build *.mrs to repository root (no optimizer; preserve order; only requested transforms)
        run: |
          set -Eeuo pipefail
          mkdir -p /tmp/work
          git fetch --no-tags --depth=1 origin sources

          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +

          geosite_list=$(git ls-tree -r --name-only origin/sources:geosite || true)
          if [[ -n "$geosite_list" ]]; then
            while IFS= read -r f; do
              [[ -n "$f" ]] || continue
              in="/tmp/work/${f}.src"
              out="/tmp/work/${f}.mihomo.list"
              mkdir -p "/tmp/work/$(dirname "$f")"
              git show "origin/sources:geosite/$f" > "$in"

              # Только: drop include/keyword/regexp; domain:/no-prefix -> +.<host>; full: -> exact (просто убрать префикс).
              awk '
                function trim(s){ sub(/^[ \t]+/,"",s); sub(/[ \t]+$/,"",s); return s }
                {
                  gsub(/\r/,"")                      # нормализуем CRLF, это не меняет смысл файла
                  s=$0; s=trim(s)
                  if(s ~ /^include:/) next
                  if(s ~ /^keyword:/) next
                  if(s ~ /^regexp:/)  next

                  if(s ~ /^full:/){
                    sub(/^full:/,"",s); print s; next
                  }
                  if(s ~ /^domain:/){
                    sub(/^domain:/,"",s)
                    sub(/^\./,"",s)                  # убираем ведущую точку, если была
                    print "+." s; next
                  }
                  if(s ~ /^$/){ print s; next }      # пустые строки сохраняем как есть
                  # без префикса -> суффикс
                  sub(/^\./,"",s)
                  print "+." s
                }
              ' "$in" > "$out"

              bn="$(basename "$f")"; base="${bn%.list}"
              mihomo convert-ruleset domain text "$out" "./geosite-${base}.mrs"
            done <<< "$geosite_list"
          fi

          geoip_list=$(git ls-tree -r --name-only origin/sources:geoip || true)
          if [[ -n "$geoip_list" ]]; then
            while IFS= read -r f; do
              [[ -n "$f" ]] || continue
              in="/tmp/work/${f}"
              mkdir -p "/tmp/work/$(dirname "$f")"
              git show "origin/sources:geoip/$f" > "$in"
              bn="$(basename "$f")"; base="${bn%.list}"
              mihomo convert-ruleset ipcidr text "$in" "./geoip-${base}.mrs"
            done <<< "$geoip_list"
          fi

          find . -mindepth 1 -maxdepth 1 -type d ! -name '.git' -exec rm -rf {} +
          find . -mindepth 1 -maxdepth 1 -type f ! -name '*.mrs' -delete

      - name: Commit *.mrs only
        run: |
          set -Eeuo pipefail
          git config --local user.email "${COMMIT_USER_EMAIL}"
          git config --local user.name  "${COMMIT_USER_NAME}"
          git add -A
          git diff --staged --quiet && exit 0
          git commit -m "Update Mihomo rules $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push || true
